<div>
  <%= form_for @place do |f| %>
    <fieldset class="form-group">
      <%= f.label :title %>
      <%= f.text_field :title, class: "form-control" %>
    </fieldset>

    <fieldset class="form-group">
      <%= f.label :user_id %>
      <%= f.text_field :user_id, class: "form-control" %>
    </fieldset>

    <fieldset class="form-group">
      <%= f.label :address, 'Address' %>
      <%= f.text_field :address, class: "form-control" %>
      <small class="text-muted">You can also enter IP. Your IP is <%= request.ip %></small>
    </fieldset>

    <div class="form-group row">
      <div class="col-sm-1">
        <%= f.label :latitude %>
      </div>

      <div class="col-sm-3">
        <%= f.text_field :latitude, class: "form-control" %>
      </div>

      <div class="col-sm-1">
        <%= f.label :longitude %>
      </div>

      <div class="col-sm-3">
        <%= f.text_field :longitude, class: "form-control" %>
      </div>

      <div class="col-sm-4">
        <a href="#" id="find-on-map" class="btn btn-info btn-sm">Find on the map</a>
      </div>
    </div>
    <div>

        <% @place.green_tees.each_with_index do |green_tee, i| %>
            <%= f.fields_for :green_tees, green_tee do |builder| %>
                <%= render 'green_tee_fields', f: builder, child_index: i %>
            <% end %>
        <% end %>
        <%= link_to_add_fields 'Add Tee', f, :green_tees %>
    </div>
    <%= f.submit 'Add!', class: 'btn btn-primary' %>
  <% end %>
</div>

<div class="#map-container">
  <div class="card-block">
    <div id="map" data-lat="<%= @place.latitude || 35.652832 %>", data-lon="<%= @place.longitude || 139.839478 %>"></div>

    <input type="text" name="map-address", id="map_address" class="form-control">
  </div>
</div>
<script>
  var lat_field, lng_field, markersArray, placeMarkerAndPanTo, updateFields, bounds;
  markersArray = [];
  lat_field = $('#place_latitude');
  lng_field = $('#place_longitude');

  renderMap = function(){
    function initMap() {
      var map;
      if ($('#map').size() > 0) {
        var center = {lat: $("#map").data('lat'), lng: $("#map").data('lon')}
        map = new google.maps.Map(document.getElementById('map'), {
          center: center,
          mapTypeId: 'satellite',
          zoom: 14
        });

        bounds = map.getBounds();

        // click on map to make marker
        // map.addListener('click', function(e) {
        //   placeMarkerAndPanTo(e.latLng, map);
        //   return updateFields(e.latLng);
        // });

        $('#find-on-map').click(function(e) {
          e.preventDefault();

          if (lat_field.val() != '' && lng_field.val() != '') {
            var LatLngBounds_test = {
              lat: parseFloat(lat_field.val()),
              lng: parseFloat(lng_field.val())
            }
          } else {
            var LatLngBounds_test = getRandom_marker(map.getBounds());
          }
          handUpdateFields(LatLngBounds_test.lat, LatLngBounds_test.lng);
          return placeMarkerAndPanTo(LatLngBounds_test, map);
        });


        // Create the search box and link it to the UI element.
        var input = document.getElementById('map_address');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              // icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }
    };

    google.maps.event.addDomListener(window, 'load', initMap);
  };
  placeMarkerAndPanTo = function(latLng, map) {
    var marker;
    // while (markersArray.length) {
    //   markersArray.pop().setMap(null);
    // }
    marker = new google.maps.Marker({
      position: latLng,
      map: map,

      draggable: true,
      // animation: google.maps.Animation.DROP, // add animation when display marker
      // position: {lat: 59.327, lng: 18.067}
    });

    marker.addListener('drag', function(e){
      return updateFields(e.latLng);
    });

    map.panTo(latLng);
    return markersArray.push(marker);
  };

  function getRandom_marker(bounds) {
    var lat_min = bounds.getSouthWest().lat(),
        lat_range = bounds.getNorthEast().lat() - lat_min,
        lng_min = bounds.getSouthWest().lng(),
        lng_range = bounds.getNorthEast().lng() - lng_min;

    return { lat: lat_min + (Math.random() * lat_range), lng: lng_min + (Math.random() * lng_range) };
  }
  // google.maps.event.addListener(Marker, "dragend", function(event) { 
  //   var lat = event.latLng.lat(); 
  //   var lng = event.latLng.lng(); 
  // });


  updateFields = function(latLng) {
    lat_field.val(latLng.lat());
    return lng_field.val(latLng.lng());
  };

  handUpdateFields = function(lat, lng) {
    lat_field.val(lat);
    return lng_field.val(lng);
  };

  renderMap();
  // Add field

  $("form").on("click", ".remove_fields", function(event) {
    $(this).closest("fieldset").find("input[type=hidden]").val("1");
    $(this).closest("fieldset").hide();
    return event.preventDefault();
  });

  $("form").on("click", ".add_fields", function(event) {
    var regexp, time;
    regexp = void 0;
    time = void 0;
    time = new Date().getTime();
    regexp = new RegExp($(this).data("id"), "g");
    $(this).before($(this).data("fields").replace(regexp, time));
    return event.preventDefault();
  });
</script>